version: "3.7"
services:
  gitea-server:
    image: gitea/gitea:latest
    depends_on:
      - redis-server
    container_name: gitea-server
    ports:
      - "${GITEA_DOMAIN_PORT}:${GITEA_DOMAIN_PORT}"
      - "10023:22"
    volumes:
      - ${BASE_PATH}/gitea:/data
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    environment:
      - TZ=Asia/Shanghai
      - RUN_MODE=prod
    restart: always
    networks:
      - git-network
    deploy:
      endpoint_mode: vip
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 1G
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${GITEA_DOMAIN_PORT}/api/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  minio-s3-server:
    image: minio/minio:latest
    container_name: minio-s3-server
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
      - ${BASE_PATH}/minio_s3:/data
    command: server /data --console-address ":9001"
    ports:
      - "9009:9000"
      - "9001:9001"
    environment:
      - LANG=en_US.UTF-8
      - TZ=Asia/Shanghai
      - MINIO_REGION_NAME=my_region
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  drone-server:
    image: drone/drone:latest
    depends_on:
      - gitea-server
    container_name: drone-server
    ports:
      - "5000:80"
    volumes:
      - ${BASE_PATH}/drone_:/data
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    restart: always
    networks:
      - git-network
    environment:
      # s3
      - DRONE_S3_ENDPOINT=http://minio-s3-server:9000
      - DRONE_S3_PATH_STYLE=true
      - DRONE_S3_SKIP_VERIFY=true
      - DRONE_S3_PREFIX=logs
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - DRONE_S3_BUCKET=drone
      - AWS_REGION=my_region
      # jsonnet
      - DRONE_JSONNET_ENABLED=true
      - LANG=en_US.UTF-8
      # db
      - DRONE_DATABASE_DRIVER=${DB_TYPE}
      - DRONE_DATABASE_DATASOURCE=${DRONE_DATABASE_DATASOURCE}
      # GITEA CONFIG
      - DRONE_GITEA_SERVER=${GITEA_SERVER}
      - DRONE_SERVER_HOST=${DRONE_SERVER_HOST}
      - DRONE_AGENTS_ENABLED=true
      - DRONE_GITEA_CLIENT_ID=${DRONE_GITEA_CLIENT_ID}
      - DRONE_GITEA_CLIENT_SECRET=${DRONE_GITEA_CLIENT_SECRET}
      - TZ=Asia/Shanghai
      - DRONE_OPEN=true
      - DRONE_GIT_ALWAYS_AUTH=true
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET:-drone_secret_by_jyao}
      # user
      - DRONE_USER_CREATE=${DRONE_ADMIN_USER:-username:jyao,admin:true}
      # ssl
      - DRONE_GITEA_SKIP_VERIFY=true
      - DRONE_SERVER_PROTO=${DRONE_SERVER_PROTO}
      # log
      - DRONE_LOGS_COLOR=true
      # cron
      - DRONE_CRON_INTERVAL=1h
      # cookie
      - DRONE_COOKIE_SECRET=${DRONE_COOKIE_SECRET:-bea26a2221fd8090ea38720fc445eca6}
      - DRONE_STATUS_NAME=continuous-integration/drone
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '1'
          memory: 1G
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # vault
  vault-server:
    image: vault:latest
    container_name: vault-server
    privileged: false
    command: ["server"]
    restart: always
    networks:
      - git-network
    tty: false
    cap_add:
      - IPC_LOCK
    volumes:
      - ${BASE_PATH}/vault:/vault
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    ports:
      - "8200:8200"
    environment:
      - LANG=en_US.UTF-8
      - VAULT_DEV_ROOT_TOKEN_ID=${VAULT_TOKEN}
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  drone-vault:
    image: drone/vault:latest
    depends_on:
      - vault-server
    container_name: drone-vault
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    expose:
      - 3000
    environment:
      - LANG=en_US.UTF-8
      - VAULT_TOKEN=${VAULT_TOKEN}
      - VAULT_ADDR=http://vault-server:8200
      - DRONE_SECRET=${DRONE_VAULT_SECRET:-provide_drone_vault_token_key_by_jyao}
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
      placement:
        constraints: [node.role == worker]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  docker-runner:
    image: drone/drone-runner-docker:latest
    depends_on:
      - drone-vault
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - LANG=en_US.UTF-8
      # vault config
      - DRONE_SECRET_PLUGIN_SKIP_VERIFY=true
      - DRONE_SECRET_PLUGIN_ENDPOINT=http://drone-vault:3000
      - DRONE_SECRET_PLUGIN_TOKEN=${DRONE_VAULT_SECRET:-provide_drone_vault_token_key_by_jyao}
      # runner config
      - DRONE_RPC_SKIP_VERIFY=true
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET:-drone_secret_by_jyao}
      - DRONE_RUNNER_CAPACITY=12
      - DRONE_RUNNER_NAME=${HOSTNAME:-runner}-docker-${DRONE_RUNNER_NUMBER:-1}
      - DRONE_UI_USERNAME=${DRONE_UI_USERNAME}
      - DRONE_UI_PASSWORD=${DRONE_UI_PASSWORD}
      - DRONE_MEMORY_SWAP_LIMIT=500000000
      - TZ=Asia/Shanghai
      # just docker
      - DRONE_RUNNER_VOLUMES=/etc/docker/daemon.json:/etc/docker/daemon.json,/tmp/var/lib/docker:/var/lib/docker,/root/.m2:/root/.m2
    restart: always
    ports:
      - "3000"
    networks:
      - git-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '1'
          memory: 1G
      placement:
        constraints: [node.role == worker]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  ssh-runner:
    image: drone/drone-runner-ssh:latest
    depends_on:
      - drone-server
    environment:
      - LANG=en_US.UTF-8
      # vault config
      - DRONE_SECRET_PLUGIN_SKIP_VERIFY=true
      - DRONE_SECRET_PLUGIN_ENDPOINT=http://drone-vault:3000
      - DRONE_SECRET_PLUGIN_TOKEN=${DRONE_VAULT_SECRET:-provide_drone_vault_token_key_by_jyao}
      # runner config
      - DRONE_RPC_SKIP_VERIFY=true
      - DRONE_RPC_PROTO=http
      - DRONE_RPC_HOST=drone-server
      - DRONE_RPC_SECRET=${DRONE_RPC_SECRET:-drone_secret_by_jyao}
      - DRONE_RUNNER_CAPACITY=12
      - DRONE_RUNNER_NAME=${HOSTNAME:-runner}-ssh-${DRONE_RUNNER_NUMBER:-1}
      - DRONE_UI_USERNAME=${DRONE_UI_USERNAME}
      - DRONE_UI_PASSWORD=${DRONE_UI_PASSWORD}
      - DRONE_MEMORY_SWAP_LIMIT=500000000
      - TZ=Asia/Shanghai
    restart: always
    ports:
      - "3000"
    networks:
      - git-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints: [node.role == worker]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  docker-registry:
    image: registry:latest
    container_name: docker-registry
    volumes:
      - ${BASE_PATH}/registry:/var/lib/registry
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    ports:
      - "5003:5000"
    environment:
      - LANG=en_US.UTF-8
      - TZ=Asia/Shanghai
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints: [node.role == worker]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/v2/"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis-server:
    image: redis:alpine
    volumes:
      - ${BASE_PATH}/redis:/data
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    command: ["redis-server", "--appendonly", "yes"]
    environment:
      - LANG=en_US.UTF-8
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
      placement:
        constraints: [node.role == worker]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  adminer-server:
    image: adminer:latest
    volumes:
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    environment:
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    ports:
      - 30088:8080
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.3'
          memory: 256M
      placement:
        constraints: [node.role == worker]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx-server:
    image: nginx:alpine
    container_name: nginx-server
    depends_on:
      - docker-runner
      - ssh-runner
      - drone-server
    volumes:
      - ${BASE_PATH}/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ${BASE_PATH}/nginx:/opt
      - /usr/share/zoneinfo/Asia/Shanghai:/etc/localtime:ro
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=Asia/Shanghai
    restart: always
    networks:
      - git-network
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
      placement:
        constraints: [node.role == manager]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

  watchtower-server:
    image: containrrr/watchtower:latest
    command: ["--cleanup", "--interval", "86400"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - TZ=Asia/Shanghai
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_INCLUDE_STOPPED=false
      - WATCHTOWER_NO_RESTART=false
      - WATCHTOWER_ROLLING_RESTART=true
    restart: always
    networks:
      - git-network
    deploy:
      mode: global
      resources:
        limits:
          cpus: '0.2'
          memory: 128M
      placement:
        constraints: [node.role == worker]

networks:
  git-network:
    attachable: true
